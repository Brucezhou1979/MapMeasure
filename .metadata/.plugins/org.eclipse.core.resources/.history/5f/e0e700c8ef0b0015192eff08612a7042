package com.example.camerameasure;

import java.io.File;
import java.util.ArrayList;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.Dialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.hardware.Camera;
import android.hardware.Camera.PictureCallback;
import android.hardware.Sensor;
import android.hardware.SensorEvent;
import android.hardware.SensorEventListener;
import android.hardware.SensorManager;
import android.location.Criteria;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.AsyncTask;
import android.os.Bundle;
import android.os.Environment;
import android.util.DisplayMetrics;
import android.view.KeyEvent;
import android.view.SurfaceHolder;
import android.view.SurfaceView;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

import com.camerameasure.math.PhotoCal;
import com.camerameasure.math.LongLatPoint;
import com.constant.Constants;
import com.tool.ConfigHelper;
import com.tool.FileHelper;
import com.tool.PublicData;

public class MainActivity extends Activity {

	private SurfaceView surfaceView;
	private SurfaceHolder surfaceHolder;
	private Camera camera;
	protected boolean isPreview = false; // 摄像区域是否准备良好
	private Button mBtnPoint, mBtnHeight, mBtnDistance, mBtnArea, mBtnSave,
			mBtnFinish, mBtnSet;
	private Draw mDraw = null;
	private String PATH = Environment.getExternalStorageDirectory()
			+ File.separator + "CameraMeasure" + File.separator;
	private String mPotPath = PATH + "POI_FILE" + File.separator;
	private String mHeightPath = PATH + "HEI_FILE" + File.separator;
	private String mDisPath = PATH + "DIS_FILE" + File.separator;
	private String mAreaPath = PATH + "AREA_FILE" + File.separator;
	public static String mTime = Constants.getTime();
	private LocationManager locationManager;
	private Location location;
	private Criteria criteria;
	private SensorManager sensorManager;
	private String provider;
	int orientationSensor;
	int accelerometerSensor;
	/**
	 * 重力传感器的值
	 */
	private float[] gravity = new float[3];
	
	/**
	 * 陀螺仪的角度值
	 */
	private float[] angle = new float[3];
	private int type = 0;

	private TextView xAcceleValue;
	private TextView yAcceleValue;
	private TextView zAcceleValue;
	private TextView longitudeValue;
	private TextView latitudeValue;
	private TextView targetLng;
	private TextView targetLat;
	// private TextView bearingValue;
	private TextView headingAngle;
	private TextView pitchAngle;
	private TextView rollAngle;
	private int a, b, c = 0;
	public static int width, height;
	private Dialog mDialog;
	private float mFocus = 0;
	private float mCameraHeight;

	private FileHelper mFileHelper;
	/**
	 * GPS 获取的经纬高
	 */
	private double longi;
	private double lati;
	private double alti;
	
	private LongLatPoint tarPoint;
	/**
	 * 移动步长
	 */
	private float mWalkSize;
	/**
	 * CCD像元值
	 */
	private float CCD;

	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		DisplayMetrics dm = new DisplayMetrics();
		getWindowManager().getDefaultDisplay().getMetrics(dm);
		width = dm.widthPixels;// 宽度
		height = dm.heightPixels;// 高度
		setContentView(R.layout.activity_main);
		initPicPath();
		initCamera();
		initViews();
		initSensor();
		initGps();
	}

	private void initGps() {
		locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
		if (!locationManager
				.isProviderEnabled(android.location.LocationManager.GPS_PROVIDER)) {
			Toast.makeText(this, "GPS已关闭,请手动开启GPS后再试！", Toast.LENGTH_LONG)
					.show();
		} else {
			Toast.makeText(this, "GPS定位中...", Toast.LENGTH_LONG).show();
		}
		criteria = new Criteria();
		criteria.setAccuracy(Criteria.ACCURACY_FINE);// 设置精确度
		criteria.setAltitudeRequired(true); // 设置请求海拔
		criteria.setBearingRequired(true); // 设置请求方位
		criteria.setCostAllowed(true); // 设置允许运营商收费
		criteria.setPowerRequirement(Criteria.POWER_HIGH); // 低功耗
		criteria.setSpeedRequired(true);

		provider = locationManager.getBestProvider(criteria, true);
		location = locationManager.getLastKnownLocation(provider);
		newLocationGPS(location);
		locationManager.requestLocationUpdates(provider, 1000, 0,
				locationListener);
		Constants.M = (Float) ConfigHelper.getSharePref(MainActivity.this,
				PublicData.SHARED_PRE_FILE_NAME, PublicData.WALKSIZE, 5);
		if (Constants.M <= 0)
			set();
	}

	private void initSensor() {
		sensorManager = (SensorManager) getSystemService(Context.SENSOR_SERVICE);
		orientationSensor = Sensor.TYPE_ORIENTATION;
		accelerometerSensor = Sensor.TYPE_ACCELEROMETER;
	}

	private SensorEventListener sensorEventListener = new SensorEventListener() {

		@Override
		public void onSensorChanged(SensorEvent sensorEvent) {
			// TODO Auto-generated method stub
			if (sensorEvent.sensor.getType() == Sensor.TYPE_ACCELEROMETER) {
				gravity[0] = sensorEvent.values[0];
				gravity[1] = sensorEvent.values[1];
				gravity[2] = sensorEvent.values[2];
				xAcceleValue.setText(String.valueOf(gravity[0]));
				yAcceleValue.setText(String.valueOf(gravity[1]));
				zAcceleValue.setText(String.valueOf(gravity[2]));
			}
			if (sensorEvent.sensor.getType() == Sensor.TYPE_ORIENTATION) {
				angle[0] = sensorEvent.values[0];
				angle[1] = sensorEvent.values[1];
				angle[2] = sensorEvent.values[2];
				headingAngle.setText(String.valueOf(angle[0]));
				pitchAngle.setText(String.valueOf(angle[1]));
				rollAngle.setText(String.valueOf(angle[2]));
				tarPoint = PhotoCal.CalSimpleLocation(mCameraHeight, longi, lati, angle[1], angle[0]);
				targetLng.setText(String.valueOf(tarPoint.dLongitude));
				targetLat.setText(String.valueOf(tarPoint.dLatitude));
				
//				targetLng
//						.setText(String.valueOf(PhotoCal
//								.CalPosbyCurrentGPSPoint(longi, lati, PhotoCal
//										.CalDistanceByAzimuth(mCameraHeight,
//												Math.abs(angle[1])), angle[1]).dLongitude));
//				targetLat
//						.setText(String.valueOf(PhotoCal
//								.CalPosbyCurrentGPSPoint(longi, lati, PhotoCal
//										.CalDistanceByAzimuth(mCameraHeight,
//												Math.abs(angle[1])), angle[1]).dLatitude));
			}
		}

		@Override
		public void onAccuracyChanged(Sensor arg0, int arg1) {
			// TODO Auto-generated method stub

		}
	};
	private LocationListener locationListener = new LocationListener() {
		// Provider的转态在可用、暂时不可用和无服务三个状态直接切换时触发此函数
		@Override
		public void onStatusChanged(String arg0, int arg1, Bundle arg2) {
			// TODO Auto-generated method stub

		}

		// Provider被enable时触发此函数，比如GPS被打开
		@Override
		public void onProviderEnabled(String arg0) {
			// TODO Auto-generated method stub

		}

		// Provider被disable时触发此函数，比如GPS被关闭
		@Override
		public void onProviderDisabled(String arg0) {
			// TODO Auto-generated method stub
			newLocationGPS(null);
		}

		// 当坐标改变时触发此函数
		@Override
		public void onLocationChanged(Location arg0) {
			// TODO Auto-generated method stub
			newLocationGPS(location);
		}
	};

	private void newLocationGPS(Location location) {
		if (location != null) {
			longi = location.getLongitude();
			lati = location.getLatitude();
			/*
			 * double alti = location.getAltitude(); double v =
			 * location.getSpeed(); double posi = location.getBearing();
			 */
			longitudeValue.setText(String.valueOf(longi));
			latitudeValue.setText(String.valueOf(lati));
		} else {
			////设置默认值
			tarPoint = new LongLatPoint();
			tarPoint.dLongitude = 114.350000343;
			tarPoint.dLatitude = 30.5360370438;
			// 未获取地理位置信息
			Toast.makeText(this, "地理位置信息未知或正在获取地理信息位置中...", Toast.LENGTH_LONG)
					.show();
		}
	}

	// 创建工作目录文件夹
	private void initPicPath() {
		ArrayList<String> pathlist = new ArrayList<String>();
		pathlist.add(PATH);
		pathlist.add(mPotPath);
		pathlist.add(mHeightPath);
		pathlist.add(mDisPath);
		pathlist.add(mAreaPath);
		for (int i = 0; i < pathlist.size(); i++) {
			File file = new File(pathlist.get(i));
			if (!file.exists())
				file.mkdirs();
		}
		mFileHelper = new FileHelper(MainActivity.this);
	}

	// 初始化摄像头
	@SuppressWarnings("deprecation")
	private void initCamera() {
		/*
		 * svDraw = (Draw) findViewById(R.id.mDraw);
		 * svDraw.setVisibility(View.VISIBLE); svDraw.drawLine();
		 */
		mDraw = (Draw) findViewById(R.id.mDraw);
		surfaceView = (SurfaceView) findViewById(R.id.camera_surfaceview);
		surfaceHolder = surfaceView.getHolder();
		surfaceHolder.addCallback(surfaceCallback);

		// 开发时建议设置
		// This method was deprecated in API level 11. this is ignored, this
		// value is set automatically when needed.
		surfaceHolder.setType(SurfaceHolder.SURFACE_TYPE_PUSH_BUFFERS);
	}

	SurfaceHolder.Callback surfaceCallback = new SurfaceHolder.Callback() {

		@Override
		public void surfaceDestroyed(SurfaceHolder arg0) {
			// TODO Auto-generated method stub
			if (camera != null) {
				camera.stopPreview();
				camera.setPreviewCallback(null);
				camera.release();
				camera = null;
			}
		}

		@Override
		public void surfaceCreated(SurfaceHolder arg0) {
			// TODO Auto-generated method stub
			if (camera == null) {
				camera = Camera.open();
			}
			try {
				camera.setPreviewDisplay(surfaceHolder);
			} catch (Throwable t) {
			}
		}

		@Override
		public void surfaceChanged(SurfaceHolder holder, int format, int width,
				int height) {
			// TODO Auto-generated method stub
			Camera.Parameters parameters = camera.getParameters();
			mFocus = parameters.getFocalLength();
			camera.setDisplayOrientation(90);
			/*
			 * Camera.Size size = getBestPreviewSize(width, height, parameters);
			 * if (size != null) { parameters.setPreviewSize(size.width,
			 * size.height);
			 */
			camera.setParameters(parameters);
			camera.startPreview();
			isPreview = true;
			// }
		}
	};

	private Camera.Size getBestPreviewSize(int width, int height,
			Camera.Parameters parameters) {
		Camera.Size result = null;
		for (Camera.Size size : parameters.getSupportedPreviewSizes()) {
			if (result == null) {
				result = size;
			} else {
				int resultArea = result.width * result.height;
				int newArea = size.width * size.height;
				if (newArea > resultArea) {
					result = size;
				}
			}
		}
		return result;
	}

	// 初始化视图组件
	private void initViews() {
		mBtnPoint = (Button) findViewById(R.id.fixed_point);
		mBtnHeight = (Button) findViewById(R.id.height);
		mBtnDistance = (Button) findViewById(R.id.distance);
		mBtnArea = (Button) findViewById(R.id.area);
		mBtnSave = (Button) findViewById(R.id.photo);
		mBtnFinish = (Button) findViewById(R.id.finish);
		mBtnSet = (Button) findViewById(R.id.set);
		mBtnPoint.setOnClickListener(click);
		mBtnHeight.setOnClickListener(click);
		mBtnDistance.setOnClickListener(click);
		mBtnArea.setOnClickListener(click);
		mBtnSave.setOnClickListener(click);
		mBtnFinish.setOnClickListener(click);
		mBtnSet.setOnClickListener(click);
		mBtnFinish.setVisibility(View.GONE);
		xAcceleValue = (TextView) findViewById(R.id.xAcceleValue);
		yAcceleValue = (TextView) findViewById(R.id.yAcceleValue);
		zAcceleValue = (TextView) findViewById(R.id.zAxisValue);
		longitudeValue = (TextView) findViewById(R.id.longitudeValue);
		latitudeValue = (TextView) findViewById(R.id.latitudeValue);
		targetLng = (TextView) findViewById(R.id.altitudeValue);
		targetLat = (TextView) findViewById(R.id.velocityValue);
		// bearingValue = (TextView) findViewById(R.id.bearingValue);
		headingAngle = (TextView) findViewById(R.id.headingValue);
		pitchAngle = (TextView) findViewById(R.id.pitchValue);
		rollAngle = (TextView) findViewById(R.id.rollValue);
		mWalkSize = (Float) ConfigHelper.getSharePref(MainActivity.this,
				PublicData.SHARED_PRE_FILE_NAME, PublicData.WALKSIZE, 5);
		mCameraHeight = (Float) ConfigHelper.getSharePref(MainActivity.this,
				PublicData.SHARED_PRE_FILE_NAME, PublicData.CAMERA_HEIGHT, 5);
		CCD = (Float) ConfigHelper.getSharePref(MainActivity.this,
				PublicData.SHARED_PRE_FILE_NAME, PublicData.CCD, 5);
	}

	OnClickListener click = new OnClickListener() {

		@Override
		public void onClick(View v) {
			switch (v.getId()) {
			case R.id.fixed_point:///设置定位功能
				mTime = Constants.getTime();
				mBtnFinish.setVisibility(View.GONE);
				type = 0;
				mBtnPoint.setBackgroundResource(R.drawable.btn_background_down);
				mBtnHeight.setBackgroundResource(R.drawable.btn_background_up);
				mBtnDistance
						.setBackgroundResource(R.drawable.btn_background_up);
				mBtnArea.setBackgroundResource(R.drawable.btn_background_up);
				mBtnPoint.setTextColor(getResources().getColor(R.color.blue));
				mBtnHeight.setTextColor(getResources().getColor(R.color.white));
				mBtnDistance.setTextColor(getResources()
						.getColor(R.color.white));
				mBtnArea.setTextColor(getResources().getColor(R.color.white));
				break;
			case R.id.height://设置高度计算功能
				a = 0;
				mTime = Constants.getTime();
				mBtnFinish.setVisibility(View.GONE);
				type = 1;
				mBtnPoint.setBackgroundResource(R.drawable.btn_background_up);
				mBtnHeight
						.setBackgroundResource(R.drawable.btn_background_down);
				mBtnDistance
						.setBackgroundResource(R.drawable.btn_background_up);
				mBtnArea.setBackgroundResource(R.drawable.btn_background_up);
				mBtnPoint.setTextColor(getResources().getColor(R.color.white));
				mBtnHeight.setTextColor(getResources().getColor(R.color.blue));
				mBtnDistance.setTextColor(getResources()
						.getColor(R.color.white));
				mBtnArea.setTextColor(getResources().getColor(R.color.white));
				break;
			case R.id.distance:
				b = 0;
				mTime = Constants.getTime();
				mBtnFinish.setVisibility(View.GONE);
				type = 2;
				mBtnPoint.setBackgroundResource(R.drawable.btn_background_up);
				mBtnHeight.setBackgroundResource(R.drawable.btn_background_up);
				mBtnDistance
						.setBackgroundResource(R.drawable.btn_background_down);
				mBtnArea.setBackgroundResource(R.drawable.btn_background_up);
				mBtnPoint.setTextColor(getResources().getColor(R.color.white));
				mBtnHeight.setTextColor(getResources().getColor(R.color.white));
				mBtnDistance
						.setTextColor(getResources().getColor(R.color.blue));
				mBtnArea.setTextColor(getResources().getColor(R.color.white));
				break;
			case R.id.area:
				mTime = Constants.getTime();
				mBtnFinish.setVisibility(View.VISIBLE);
				type = 3;
				mBtnPoint.setBackgroundResource(R.drawable.btn_background_up);
				mBtnHeight.setBackgroundResource(R.drawable.btn_background_up);
				mBtnDistance
						.setBackgroundResource(R.drawable.btn_background_up);
				mBtnArea.setBackgroundResource(R.drawable.btn_background_down);
				mBtnPoint.setTextColor(getResources().getColor(R.color.white));
				mBtnHeight.setTextColor(getResources().getColor(R.color.white));
				mBtnDistance.setTextColor(getResources()
						.getColor(R.color.white));
				mBtnArea.setTextColor(getResources().getColor(R.color.blue));
				break;
			case R.id.photo:
				takePicture();
				break;
			case R.id.finish:
				isFinish();
				break;
			case R.id.set:
				set();
				break;
			default:
				break;
			}
		}
	};

	private void set() {
		mDialog = new Dialog(MainActivity.this, R.style.dialog);
		mDialog.setContentView(R.layout.set);
		Button btnsure = (Button) mDialog.findViewById(R.id.ensure);
		Button btncancel = (Button) mDialog.findViewById(R.id.cancel);
		final EditText camerheight = (EditText) mDialog
				.findViewById(R.id.edit_camera);
		final EditText ccd = (EditText) mDialog.findViewById(R.id.edit_values);
		final EditText etwalkstep = (EditText) mDialog
				.findViewById(R.id.edit_steps);

		if (mWalkSize != 0.0f) {
			etwalkstep.setText(String.valueOf(mWalkSize));
			camerheight.setText(String.valueOf(mCameraHeight));
			ccd.setText(String.valueOf(CCD));
		}
		btnsure.setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Constants.M = Double.parseDouble(etwalkstep.getText()
						.toString());
				ConfigHelper.setSharePref(MainActivity.this,
						PublicData.SHARED_PRE_FILE_NAME, PublicData.WALKSIZE,
						Float.parseFloat(etwalkstep.getText().toString()));
				ConfigHelper.setSharePref(MainActivity.this,
						PublicData.SHARED_PRE_FILE_NAME,
						PublicData.CAMERA_HEIGHT,
						Float.parseFloat(camerheight.getText().toString()));
				ConfigHelper.setSharePref(MainActivity.this,
						PublicData.SHARED_PRE_FILE_NAME, PublicData.CCD,
						Float.parseFloat(ccd.getText().toString()));
				mDialog.dismiss();
			}
		});
		btncancel.setOnClickListener(new OnClickListener() {

			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mDialog.dismiss();
			}
		});
		mDialog.show();
	}

	private void isFinish() {
		if(c>2)
		{
			Toast.makeText(MainActivity.this,"10"+Math.random(),Toast.LENGTH_SHORT).show();
			c=0;
			mTime = Constants.getTime();
		}
		else
			Toast.makeText(MainActivity.this,"当前顶点暂时不能构成多边形！",Toast.LENGTH_SHORT).show();
	}

	/**
	 * 这里用来跳转到测高以及测距离的功能中
	 * 包括，对拍的相片进行相应的处理，如画上边界线与下边界线
	 */
	private void gotoWork() {
		if (Constants.L1.size() > 0) {
			Constants.L1.clear();
			Constants.L1 = new ArrayList<Double>();
		}
		Intent intent = new Intent();
		intent.setClass(getBaseContext(), WorkActivity.class);
		intent.putExtra(Constants.TYPe, type);
		intent.putExtra(Constants.PATH, PATH);
		startActivity(intent);
	}

	private void takePicture() {
		camera.takePicture(null, null, mPictureCallback);
	}

	Camera.PictureCallback mPictureCallback = new PictureCallback() {

		@Override
		public void onPictureTaken(byte[] data, Camera camera) {
			// TODO Auto-generated method stub
			// 执行照片保存方法
			new SavePictureTask().execute(data);
			// 开启预览
			camera.startPreview();
		}
	};

	// 定义保存照片任务类
	class SavePictureTask extends AsyncTask<byte[], String, String> {
		@Override
		protected String doInBackground(byte[]... params) {
			switch (type) {
			case 0:
				PATH = mPotPath + mTime + File.separator;
				break;
			case 1:
				PATH = mHeightPath + mTime + File.separator;
				break;
			case 2:
				PATH = mDisPath + mTime + File.separator;
				break;
			case 3:
				PATH = mAreaPath + mTime + File.separator;
				break;
			default:
				break;
			}
			Intent intent = new Intent();
			intent.setClass(getBaseContext(), PicSaveActivity.class);
			intent.putExtra(Constants.FILEBYTEDATA, params[0]);
			intent.putExtra(Constants.PATH, PATH);
			startActivityForResult(intent, 66);
			return null;
		}
	}

	@Override
	protected void onActivityResult(int requestCode, int resultCode, Intent data) {
		switch (resultCode) { // resultCode为回传的标记，我在B中回传的是RESULT_OK
		case RESULT_OK:
			Toast.makeText(getBaseContext(), "保存成功！", Toast.LENGTH_SHORT)
					.show();
			switch (type) {
			case 0://计算定点
			{
							mFileHelper.writeSDFile(longi + "&&" + lati, PATH
						+ PicSaveActivity.TXTNAME + ".txt");

				///使用相机的高度与方向位计算中心点的距离
//				double dL = PhotoCal.CalDistanceByAzimuth(mCameraHeight, angle[1]);
//				LongLatPoint pt = new LongLatPoint();
//				pt= PhotoCal.CalPosbyCurrentGPSPoint(longi, lati, dL, angle[1]);
				break;
			}
			case 1://如果大于1张时，计算距离
				a++;
				if (a > 1) {
					Constants.f2 = mFocus;
					a = 0;
					gotoWork();
				}
				Constants.f1 = mFocus;
				break;
			case 2://如果大于1张相片时，计算高度
				b++;
				if (b > 1) {
					Constants.f2 = mFocus;
					b = 0;
					gotoWork();
				}
				Constants.f1 = mFocus;
				break;
			case 3://面积公式还需要开发
				c++;
				mFileHelper.writeSDFile(longitudeValue.getText().toString()
						+ "&&" + latitudeValue.getText().toString(), PATH
						+ PicSaveActivity.TXTNAME + ".txt");
				break;
			default:
				break;
			}
			break;
		case RESULT_CANCELED:

			break;
		}
	}

	private void Back() {
		AlertDialog.Builder builder = new Builder(MainActivity.this);
		builder.setMessage("是否退出？");
		builder.setTitle("提示");
		builder.setPositiveButton("确定",
				new android.content.DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						dialog.dismiss();
						android.os.Process.killProcess(android.os.Process
								.myPid());
					}
				});
		builder.setNegativeButton("取消",
				new android.content.DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						dialog.dismiss();
					}
				});
		builder.create().show();
	}

	@Override
	protected void onResume() {
		super.onResume();
		sensorManager.registerListener(sensorEventListener,
				sensorManager.getDefaultSensor(accelerometerSensor),
				SensorManager.SENSOR_DELAY_NORMAL);
		sensorManager.registerListener(sensorEventListener,
				sensorManager.getDefaultSensor(orientationSensor),
				SensorManager.SENSOR_DELAY_NORMAL);
		locationManager.requestLocationUpdates(provider, 1000, 0,
				locationListener);
	}

	@Override
	protected void onStop() {
		super.onStop();
		sensorManager.unregisterListener(sensorEventListener);
	}

	@Override
	public void onPause() {
		super.onPause();
		if (isPreview) {
			camera.stopPreview();
		}
		locationManager.removeUpdates(locationListener);
		sensorManager.unregisterListener(sensorEventListener);
		if (camera != null) {
			camera.release();
			camera = null;
		}
		isPreview = false;
	}

	@Override
	public void onDestroy() {
		camera.release();
		camera = null;
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK)
			Back();
		return super.onKeyDown(keyCode, event);
	}
}
