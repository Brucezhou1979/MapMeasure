package com.camerameasure.math;

import com.constant.Constants;

//////

/**
 * 基于相片量测的计算类
 * @author Administrator
 *
 */
public class PhotoCal {
	//地球的平均半径，单位为米
	double R = 6371393;
	double PI = 3.1415926;
	
	/**
	 * 通过当前点的经纬度以及与相机观察点的距离和方位角计算新点的经纬度值
	 * @param dAj 已知点的经度
	 * @param dAw 已知点的纬度
	 * @param dLong 距离已经点的距离，单位为米
	 * @param dAzimuth 与已知点的方位角，单位为弧度，与正北方向的夹角
	 * @return
	 */
	public LongLatPoint CalPosbyCurrentGPSPoint(double dAj, double dAw, double dLong, double dAzimuth)
	{
		double dc = dLong / R;
		dc = dc*180 / PI;
		///求解a，得到纬度的角度
		double a = Math.acos(Math.cos(90-dAj)*Math.cos(dc)+Math.sin(90-dAw)*Math.sin(dc)*Math.cos(dAzimuth));
		double dC = Math.asin(Math.sin(dc)*Math.sin(dAzimuth)/Math.sin(a));		
		double dBw =90 - a;
		double dBj = dAj + dC;
		LongLatPoint pt = new LongLatPoint();
		pt.dLongitude = dBj;
		pt.dLatitude = dBw;
		return pt;
	}
	
	
	/**
	 * 通过相机的高度以及所拍对象的中心点的方向角，计算相机中心到所拍中心点的角度
	 * @param dHeight 相机的成像高度，高度为米
	 * @param dAzimuth 与所拍点的方位角，角度
	 * @return
	 */
	public double CalDistanceByAzimuth(double dHeight, double dAzimuth)
	{
		double dDis = 0.0;
		dDis = Math.tan(dAzimuth)* dHeight;
		return dDis;
	}
	
	
	/**
	 * 两相片，影像简易距离计算公式
	 * @param dMoveStep 两相片移动步长
	 * @param dL1 在第一张相片中的高度或距离，通过上下两线的象素与CCD大小计算
	 * @param dL2 在第二张相片中的高度或距离，通过上下两线的象素与CCD大小计算
	 * @param dfoucs1 第一个相片成像时的焦距
	 * @param dfoucs2 第二个相片成像时的集中
	 * @return
	 */
	public double CalDisByTwoPicPixels(double dMoveStep, double dL1, double dL2, double dfoucs1, double dfoucs2)
	{
		double dDis =0.0;
		dDis = dMoveStep*dL1*dL2 / (dfoucs1*dL2 - dfoucs2*dL1);
		return dDis;
	}

	/**
	 * 两相片，影像简易高度计算公式
	 * @param dMoveStep 两相片移动步长
	 * @param dL1 在第一张相片中的高度或距离，通过上下两线的象素与CCD大小计算
	 * @param dL2 在第二张相片中的高度或距离，通过上下两线的象素与CCD大小计算
	 * @param dfoucs1 第一个相片成像时的焦距
	 * @param dfoucs2 第二个相片成像时的集中
	 * @return
	 */
	public double CalHeightByTwoPicPixels(double dMoveStep, double dL1, double dL2, double dfoucs1, double dfoucs2)
	{
		double dHeight =0.0;
		dHeight = (dMoveStep*dfoucs1*dL2)/(dfoucs1*dL2 - dfoucs2*dL1);
		return dHeight;
	}
}
